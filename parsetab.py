
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initleftEQUALleftPLUSMINUSleftTIMESDIVIDEleftCRegisterQRegisterRegisterleftNextAND Assignment CInput CMP COMMA COutput CRegister Choice DIVIDE Define EQUAL Forbidden GE GT IF Kraus LBRACE LBRACKET LE LPAREN LT MINUS Measurement NOT NULL NUMBER NUMBER_SIGN Name Next OR PLUS Parallel Prefix Process Pstr QInput QOutput QRegister RBRACE RBRACKET RPAREN Ran Register Relabel Rem Silent Sub Superoperator THEN TIMES XORinit : NUMBER_SIGN clause NUMBER_SIGNclause : clause Next clauseclause : cregister \n\t\t\t  | qregisterclause : cregister EQUAL assignment\n\t\t\t  | qregister EQUAL expressionexpression : expression PLUS expression\n\t\t\t\t  | expression MINUS expressionexpression : MINUS expressionexpression : number TIMES registerexpression : registerassignment : Assignmentregister : Registercregister : CRegisterqregister : QRegisternumber : NUMBER'
    
_lr_action_items = {'NUMBER_SIGN':([0,3,4,5,6,7,12,13,14,15,18,20,23,25,26,27,],[2,8,-3,-4,-14,-15,-2,-5,-12,-6,-11,-13,-9,-7,-8,-10,]),'$end':([1,8,],[0,-1,]),'CRegister':([2,9,],[6,6,]),'QRegister':([2,9,],[7,7,]),'Next':([3,4,5,6,7,12,13,14,15,18,20,23,25,26,27,],[9,-3,-4,-14,-15,-2,-5,-12,-6,-11,-13,-9,-7,-8,-10,]),'EQUAL':([4,5,6,7,],[10,11,-14,-15,]),'Assignment':([10,],[14,]),'MINUS':([11,15,16,18,20,21,22,23,25,26,27,],[16,22,16,-11,-13,16,16,-9,-7,-8,-10,]),'NUMBER':([11,16,21,22,],[19,19,19,19,]),'Register':([11,16,21,22,24,],[20,20,20,20,20,]),'PLUS':([15,18,20,23,25,26,27,],[21,-11,-13,-9,-7,-8,-10,]),'TIMES':([17,19,],[24,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'clause':([2,9,],[3,12,]),'cregister':([2,9,],[4,4,]),'qregister':([2,9,],[5,5,]),'assignment':([10,],[13,]),'expression':([11,16,21,22,],[15,23,25,26,]),'number':([11,16,21,22,],[17,17,17,17,]),'register':([11,16,21,22,24,],[18,18,18,18,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> NUMBER_SIGN clause NUMBER_SIGN','init',3,'p_info_term','init_parser.py',26),
  ('clause -> clause Next clause','clause',3,'p_several_clause','init_parser.py',29),
  ('clause -> cregister','clause',1,'p_clause_register','init_parser.py',32),
  ('clause -> qregister','clause',1,'p_clause_register','init_parser.py',33),
  ('clause -> cregister EQUAL assignment','clause',3,'p_clause_assignment','init_parser.py',36),
  ('clause -> qregister EQUAL expression','clause',3,'p_clause_assignment','init_parser.py',37),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binaryopexpr','init_parser.py',40),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binaryopexpr','init_parser.py',41),
  ('expression -> MINUS expression','expression',2,'p_expression_negative','init_parser.py',44),
  ('expression -> number TIMES register','expression',3,'p_expression_coeffexpr','init_parser.py',47),
  ('expression -> register','expression',1,'p_expression_nocoeffexpr','init_parser.py',50),
  ('assignment -> Assignment','assignment',1,'p_assignment','init_parser.py',53),
  ('register -> Register','register',1,'p_register','init_parser.py',56),
  ('cregister -> CRegister','cregister',1,'p_cregister','init_parser.py',59),
  ('qregister -> QRegister','qregister',1,'p_qregister','init_parser.py',62),
  ('number -> NUMBER','number',1,'p_number','init_parser.py',65),
]
